app.post('/submit-bill', (req, res) => {
  // Retrieve employeeId from the request cookies
  const employeeId = req.cookies.EmployeeId;

  // Create a new bill entry
  const insertBillQuery = 'INSERT INTO BillT (EmployeeID, BillingDate) VALUES (?, CURDATE())';
  connection.query(insertBillQuery, [employeeId], (err, result) => {
    if (err) {
      console.error('Error creating bill:', err);
      return res.status(500).json({ error: 'Bill creation failed' });
    }

    // Retrieve the maximum BillId
    const maxBillIdQuery = 'SELECT MAX(BillingNo) AS MaxBillId FROM BillT';
    connection.query(maxBillIdQuery, (err, rows) => {
      if (err) {
        console.error('Error retrieving max BillId:', err);
        return res.status(500).json({ error: 'Error retrieving max BillId' });
      }
      const billingNo = rows[0].MaxBillId; // Get the ID of the newly inserted bill

      // Prepare the SQL query and values for batch insertion of bill products
      const insertProductsQuery = 'INSERT INTO BillProducts (BillingNo, ProductID, Quantity) VALUES ?';
      const updateInventoryQuery = 'UPDATE inventory SET WarehouseStockLevel = (WarehouseStockLevel - ?) WHERE ProductID = ?';

      const formData = req.body;

     // Validate employeeId and product data
      if (!Array.isArray(formData) || formData.length === 0) {
          console.error('Invalid order product data');
          return res.status(400).json({ error: 'Invalid order product data' });
      }

      // Prepare values for INSERT query
      const insertValues = formData.map(({ productId, quantity }) => [billingNo, productId, quantity]);

      // Prepare values for UPDATE query
      const updateValues = formData.map(({ quantity, productId }) => [quantity, productId]);

      // Insert bill products into the BillProducts table
      connection.query(insertProductsQuery, [insertValues], (err) => {
          if (err) {
              console.error('Error inserting bill products:', err);
              return res.status(500).json({ error: 'Bill submission failed' });
          }
      });
      connection.query(updateInventoryQuery, [updateValues], (err) => {
        if (err) {
            console.error('Error updating inventory:', err);
            return res.status(500).json({ error: 'Bill submission failed' });
        }
        return res.status(200).json({ message: 'Bill submitted successfully' });
    });

        // connection.query(updateInventory, [valuesInventory], (err) => {
        //   if (err) {
        //     console.error('Error updating inventory:', err);
        //     return res.status(500).json({ error: 'Bill submission failed' });
        //   }
        //   return res.status(200).json({ message: 'Bill submitted successfully' });
        // }); 

      });
  });
});




connection.query(updateInventoryQuery, [updateValues], (err) => {
  if (err) {
      console.error('Error updating inventory:', err);
      return res.status(500).json({ error: 'Bill submission failed' });
  }
  return res.status(200).json({ message: 'Bill submitted successfully' });
});